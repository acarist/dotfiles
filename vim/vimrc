" ========== Vim Basic Settings ============="

" Make vim incompatbile to vi.
set nocompatible

" Pathogen settings.
filetype off
set runtimepath+=~/.vim/bundle/vundle
call vundle#rc()

" bundles bundles
Bundle 'gmarik/vundle'

Bundle 'kien/ctrlp.vim.git'
Bundle 'rizzatti/dash.vim.git'
Bundle 'Raimondi/delimitMate.git'
Bundle 'mattn/emmet-vim.git'
Bundle 'rizzatti/funcoo.vim.git'
Bundle 'rizzatti/greper.vim.git'
Bundle 'sjl/gundo.vim.git'
Bundle 'AndrewRadev/linediff.vim.git'
Bundle 'scrooloose/nerdtree.git'
Bundle 'scrooloose/syntastic.git'
Bundle 'majutsushi/tagbar.git'
Bundle 'tomtom/tlib_vim.git'
Bundle 'MarcWeber/vim-addon-mw-utils.git'
Bundle 'zekzekus/vim-airline.git'
Bundle 'bling/vim-bufferline.git'
Bundle 'tpope/vim-commentary.git'
Bundle 'altercation/vim-colors-solarized.git'
Bundle 'flazz/vim-colorschemes.git'
Bundle 'Lokaltog/vim-easymotion.git'
Bundle 'tpope/vim-fugitive.git'
Bundle 'fatih/vim-go.git'
Bundle 'pangloss/vim-javascript.git'
Bundle 'tpope/vim-markdown.git'
Bundle 'hynek/vim-python-pep8-indent.git'
Bundle 'tpope/vim-repeat.git'
Bundle 'mhinz/vim-signify.git'
Bundle 'garbas/vim-snipmate.git'
Bundle 'zekzekus/vim-snippets.git'
Bundle 'tpope/vim-surround.git'
Bundle 'christoomey/vim-tmux-navigator.git'
Bundle 'jmcantrell/vim-virtualenv.git'
Bundle 'jimenezrick/vimerl.git'
Bundle 'Shougo/vimproc.vim.git'
Bundle 'sjl/vitality.vim.git'
Bundle 'Valloric/YouCompleteMe'

filetype plugin indent on
set modelines=0

"TAB settings.
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" More Common Settings.
set encoding=utf-8
set scrolloff=3
set autoindent
set noshowmode
set showcmd
set hidden
set visualbell

set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2

set number
set relativenumber

set undofile
set shell=/bin/bash
set lazyredraw
set matchtime=3

"Changing Leader Key
let mapleader = ","
let localleader = "\\"

" Set title to window
set title

" Make pasting done without any indentation break."
set pastetoggle=<F3>

" Make Vim able to edit corntab fiels again.
set backupskip=/tmp/*,/private/tmp/*"

" Enable Mouse
" set mouse=a

"Settings for Searching and Moving
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %


" Make Vim to handle long lines nicely.
set wrap
set textwidth=79
set formatoptions=qrn1
set colorcolumn=79

" To  show special characters in Vim
set listchars=tab:▸\ ,eol:¬

" vim handles long lines nicely with these
nnoremap j gj
nnoremap k gk

" Set vim to save the file on focus out.
augroup file_operation
  autocmd!
  autocmd VimResized * :wincmd =
augroup END

",W Command to remove white space from a file.
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" ,v Select just pasted text.
nnoremap <leader>v V`]

" jj For Qicker Escaping between normal and editing mode.
inoremap jj <ESC>

" Wildmenu completion "
set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn " Version Controls"
set wildignore+=*.aux,*.out,*.toc "Latex Indermediate files"
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg "Binary Imgs"
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest "Compiled Object files"
set wildignore+=*.spl "Compiled speolling world list"
set wildignore+=*.sw? "Vim swap files"
set wildignore+=*.DS_Store "OSX SHIT"
set wildignore+=*.luac "Lua byte code"
"set wildignore+=migrations "Django migrations"
set wildignore+=*.pyc "Python Object codes"
set wildignore+=*.orig "Merge resolution files"
set wildignore+=*.beam
set wildignore+=build
set wildignore+=static
set wildignore+=tmp

" Make Sure that Vim returns to the same line when we reopen a file"
augroup line_return
  autocmd!
  autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \ execute 'normal! g`"zvzz' |
        \ endif
augroup END

" Removing scrollbars
if has("gui_running")
  set guitablabel=%-0.12t%M
  set guioptions-=T
  set guioptions-=r
  set guioptions-=L
  set guioptions+=a
  set guioptions-=m
endif

" Special Settings for Consoles
if !has("gui_running")
  set t_Co=256
endif

colorscheme solarized
set background=dark

" ========== Plugin Settings =========="
" Mapping to NERDTree
nnoremap <C-n> :NERDTreeToggle<cr>
let NERDTreeIgnore=['\~$', '\.pyc$', '\.beam$']

" Tagbar key bindings."
nmap <leader>l <ESC>:TagbarToggle<cr>
imap <leader>l <ESC>:TagbarToggle<cr>i

syntax on

set clipboard=unnamed

" swap files will be saved to this folder
set dir=~/.vimtmp

" syntastic
let g:syntastic_python_checkers=['flake8']
let g:syntastic_go_checkers=['gofmt']
let g:syntastic_javascript_checkers=['jsl']
let g:syntastic_check_on_open=1

" my new favorite monospace font for coding
set guifont=Monaco:h14

" vim-virtualenv plugin settings
let g:virtualenv_auto_activate = 1
let g:virtualenv_stl_format = '[%n]'

" toggle background color base between dark and light
map <F5> :call ToggleBg()<CR>
function! ToggleBg()
  if &background == 'dark'
    set bg=light
  else
    set bg=dark
  endif
endfunc

" sometimes i like auto completion but not everytime
let g:jedi#popup_on_dot = 0
let g:jedi#show_call_signatures = "0"
let g:jedi#use_tabs_not_buffers = 0

" after this command i type the name of virtualenv
nnoremap <leader>V :VirtualEnvActivate 

" ctrl-p plugin options
let g:ctrlp_max_height = 30
let g:ctrlp_follow_symlinks = 1
let g:ctrlp_working_path_mode = 'rw'
nnoremap <leader>t :CtrlP<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>y :CtrlPBufTag<CR>

" file extensions for file jump
set suffixesadd+=.html

" gundo settings
nnoremap <leader>G :GundoToggle<CR>
set undodir=~/.vimtmp

" enable folding
set foldmethod=indent
set foldlevel=99

" lets use supertab for completion
let g:SuperTabDefaultCompletionType = "context"
set completeopt=menuone,longest,preview

" vim-statline settings
let g:statline_filename_relative=1
let g:statline_fugitive=1
let g:statline_trailing_space = 0
let g:statline_virtualenv = 1

" map only command to an easy leader shortcut
nnoremap <leader>o :only<CR>

" easy save file
nnoremap <leader>w :w<CR>

" enable file jump for django template files
set path+=templates " for django versions < 1.4
set path+=*/templates " for django versions 1.4 and higher
set path+=*/*/templates
set path+=*/*/*/templates " specific for polar project structure
set path+=assets " for django versions < 1.4
set path+=*/assets " for django versions 1.4 and higher
set path+=*/*/assets
set path+=*/*/*/assets " specific for polar project structure

" easy switch to last edited buffer (alternate buffer)
nnoremap <leader>, :b#<CR>

" enable matchit plugin
runtime macros/matchit.vim

" vim-javascript configuration
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

augroup programming_au
  autocmd!
  autocmd FileType ruby,vim,jade,stylus,javascript setl ts=2 sts=2 sw=2
  autocmd FileType html setl nowrap
  autocmd FileType snippet,snippets setlocal noexpandtab
  autocmd BufEnter *.rss,*.atom,*.odrl setf xml
  autocmd BufEnter *.pkb,*.pks,*.tpb,*.tps,*.prc set ft=plsql
  autocmd BufEnter plsql setl ts=2 sts=2 sw=2
  autocmd BufEnter volofile setf javascript
  autocmd FileType python set ft=python.django " For SnipMate
  "autocmd FileType python set omnifunc=jedi#complete
  autocmd FileType html set ft=htmldjango " For SnipMate
  autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
augroup END

"set omnifunc=syntaxcomplete#Complete
let g:bufferline_solo_highlight = 1
let g:bufferline_echo = 0
let g:bufferline_rotate = 1
let g:bufferline_fixed_index = -1 "always last

" make word uppercase and continue editing
inoremap <c-u> <esc>gUiw`]a
" make word under the cursor uppercase
nnoremap <c-u> gUiw

" airline configuration
let g:airline#extensions#virtualenv#enabled = 1
let g:airline#extensions#tagbar#enabled = 0
" unicode symbols
let g:airline_symbols = {}
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'

" vitality
let g:vitality_fix_focus=0

" signify plugin
let g:signify_vcs_list = [ 'git' ]
let g:signify_disable_by_default = 1
let g:signify_update_on_bufenter = 1
let g:signify_line_highlight = 1

" silver searcher options
let g:agprg="ag --column --smart-case --follow --skip-vcs-ignores"
let g:aghighlight=1

" dash.vim cinfiguration
:nmap <silent> <leader>S <Plug>DashGlobalSearch
:nmap <silent> <leader>s <Plug>DashSearch

augroup go_au
  autocmd!
  autocmd FileType go setlocal noexpandtab ts=4 sts=4 sw=4
  autocmd FileType go nmap K <Plug>(go-doc)
  autocmd FileType go nmap <leader>d <Plug>(go-def)
augroup END

" YouCompleteMe settings
set completeopt-=preview
let g:ycm_add_preview_to_completeopt=0
nnoremap <leader>d :YcmCompleter GoToDefinitionElseDeclaration<CR>
