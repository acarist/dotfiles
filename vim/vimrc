" ========== Vim Basic Settings ============="

" Pathogen settings.
filetype off
execute pathogen#infect()
execute pathogen#helptags()
filetype plugin indent on

" Make vim incompatbile to vi.
set nocompatible
set modelines=0

"TAB settings.
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" More Common Settings.
set encoding=utf-8
set scrolloff=3
set autoindent
set noshowmode
set showcmd
set hidden
set visualbell

set cursorline
set cursorcolumn
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2

"set relativenumber
set number
set relativenumber

set undofile
"set shell=/usr/local/bin/fish
set shell=/bin/bash
set lazyredraw
set matchtime=3

"Changing Leader Key
let mapleader = ","
let localleader = "\\"

" Set title to window
set title

" Dictionary path, from which the words are being looked up.
set dictionary=/usr/share/dict/words

" Make pasting done without any indentation break."
set pastetoggle=<F3>

" Make Vim able to edit corntab fiels again.
set backupskip=/tmp/*,/private/tmp/*"

" Enable Mouse
" set mouse=a

"Settings for Searching and Moving
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %


" Make Vim to handle long lines nicely.
set wrap
set textwidth=79
set formatoptions=qrn1
set colorcolumn=79

" To  show special characters in Vim
"set list
set listchars=tab:▸\ ,eol:¬

" Naviagations using keys up/down/left/right
" Disabling default keys to learn the hjkl
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
vnoremap <up> <nop>
vnoremap <down> <nop>
vnoremap <left> <nop>
vnoremap <right> <nop>
nnoremap j gj
nnoremap k gk

" Get Rid of stupid Goddamned help keys
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Map : to ; also in command mode.
nnoremap ; :
vnoremap ; :

" Set vim to save the file on focus out.
augroup file_operation
  autocmd!
  autocmd FocusLost * :wa
  autocmd VimResized * :wincmd =
  " Source the vimrc file after saving it
  autocmd bufwritepost .vimrc source ~/.vimrc
augroup END

" Adding More Shorcuts keys using leader kye.
" Leader Kye provide separate namespace for specific commands.
",W Command to remove white space from a file.
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" ,ft Fold tag, helpful for HTML editing.
nnoremap <leader>ft vatzf

" ,q Re-hardwrap Paragraph
nnoremap <leader>q gqip

" ,v Select just pasted text.
nnoremap <leader>v V`]

" ,ev Shortcut to edit .vimrc file on the fly on a vertical window.
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" jj For Qicker Escaping between normal and editing mode.
inoremap jj <ESC>

" Wildmenu completion "
set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn " Version Controls"
set wildignore+=*.aux,*.out,*.toc "Latex Indermediate files"
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg "Binary Imgs"
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest "Compiled Object files"
set wildignore+=*.spl "Compiled speolling world list"
set wildignore+=*.sw? "Vim swap files"
set wildignore+=*.DS_Store "OSX SHIT"
set wildignore+=*.luac "Lua byte code"
"set wildignore+=migrations "Django migrations"
set wildignore+=*.pyc "Python Object codes"
set wildignore+=*.orig "Merge resolution files"
set wildignore+=*.beam
set wildignore+=build

" Make Sure that Vim returns to the same line when we reopen a file"
augroup line_return
    autocmd!
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \ execute 'normal! g`"zvzz' |
        \ endif
augroup END

nnoremap g; g;zz

" =========== END Basic Vim Settings ===========


" =========== Gvim Settings =============

" Removing scrollbars
if has("gui_running")
    set guitablabel=%-0.12t%M
    set guioptions-=T
    set guioptions-=r
    set guioptions-=L
    set guioptions+=a
    set guioptions-=m
endif

" Special Settings for Consoles
if !has("gui_running")
    set t_Co=256
endif

set background=dark
colorscheme solarized


" ========== END Gvim Settings ==========


" ========== Plugin Settings =========="

" Mapping to NERDTree
nnoremap <C-n> :NERDTreeToggle<cr>
let NERDTreeIgnore=['\~$', '\.pyc$', '\.beam$']

" easier window navigation
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k

" Tagbar key bindings."
nmap <leader>l <ESC>:TagbarToggle<cr>
imap <leader>l jj:TagbarToggle<cr>i


" =========== END Plugin Settings =========="
syntax on

" i can paste from system clipboard
" with unnamed, vim in tmux session does not yank.
" this is the workaround
" now i use reattach-to-user-namespace with conjuction
" of tmux conf i can copy and paste from/to system clipboard
"if $TMUX == ''
    "set clipboard+=unnamed
"endif
set clipboard=unnamed

" swap files will be saved to this folder
set dir=~/tmp

" company preferene for python syntax checker
let g:syntastic_python_checkers=['flake8']
let g:syntastic_go_checkers=['gofmt']
let g:syntastic_javascript_checkers=['jsl']
" get rid of silly backup and swap files.
" i wish i do not regret for this statement
set nobackup
set noswapfile

" my new favorite monospace font for coding
set guifont=Monaco:h15

" vim-virtualenv plugin settings
let g:virtualenv_auto_activate = 1
let g:virtualenv_stl_format = '[%n]'

" toggle background color base between dark and light
map <F5> :call ToggleBg()<CR>
function! ToggleBg()
    if &background == 'dark'
        set bg=light
    else
        set bg=dark
    endif
endfunc

" sytastic checks on file open
let g:syntastic_check_on_open=1

" sometimes i like auto completion but not everytime
let g:jedi#popup_on_dot = 0
let g:jedi#show_call_signatures = "0"
let g:jedi#use_tabs_not_buffers = 0

" after this command i type the name of virtualenv
nnoremap <leader>V :VirtualEnvActivate 

" i wanna used to use jj keys to return normal mode
inoremap <esc> <nop>

" ctrl-p plugin options
let g:ctrlp_max_height = 30
let g:ctrlp_follow_symlinks = 1
nnoremap <leader>t :CtrlP<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>y :CtrlPBufTag<CR>

" file extensions for file jump
set suffixesadd+=.html

" gundo settings
nnoremap <leader>G :GundoToggle<CR>
set undodir=/tmp

" enable folding
set foldmethod=indent
set foldlevel=99

" lets use supertab for completion
let g:SuperTabDefaultCompletionType = "context"
set completeopt=menuone,longest,preview

" vim-statline settings
let g:statline_filename_relative=1
let g:statline_fugitive=1
let g:statline_trailing_space = 0
let g:statline_virtualenv = 1

" map only command to an easy leader shortcut
nnoremap <leader>o :only<CR>
inoremap <leader>o <ESC>:only<CR>

" easy save file
nnoremap <leader>w :w<CR>
inoremap <leader>w <ESC>:w<CR>

" enable file jump for django template files
set path+=templates " for django versions < 1.4
set path+=*/templates " for django versions 1.4 and higher
set path+=*/*/templates
set path+=*/*/*/templates " specific for polar project structure
set path+=assets " for django versions < 1.4
set path+=*/assets " for django versions 1.4 and higher
set path+=*/*/assets
set path+=*/*/*/assets " specific for polar project structure

" easy switch to last edited buffer (alternate buffer)
nnoremap <leader>, :b#<CR>

" enable matchit plugin
runtime macros/matchit.vim

" vim-javascript configuration
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

augroup programming_au
    autocmd!
    autocmd FileType ruby,vim,jade,stylus setl ts=2 sts=2 sw=2
    autocmd FileType html setl nowrap
    autocmd FileType snippet,snippets setlocal noexpandtab
    autocmd BufEnter *.rss,*.atom,*.odrl setf xml
    autocmd BufEnter *.go setl noet ts=4 sts=4 sw=4
    autocmd BufEnter *.pkb,*.pks,*.tpb,*.tps,*.prc set ft=plsql
    autocmd BufEnter plsql setl ts=2 sts=2 sw=2
    autocmd BufEnter volofile setf javascript
    autocmd FileType python set ft=python.django " For SnipMate
    "autocmd FileType python set omnifunc=jedi#complete
    autocmd FileType html set ft=htmldjango " For SnipMate
    autocmd InsertEnter * set nocursorcolumn
    autocmd InsertLeave * set cursorcolumn
augroup END

"set omnifunc=syntaxcomplete#Complete
let g:bufferline_solo_highlight = 1
let g:bufferline_echo = 0

" make word uppercase and continue editing
inoremap <c-u> <esc>gUiw`]a
" make word under the cursor uppercase
nnoremap <c-u> gUiw

" airline configuration
let g:airline#extensions#virtualenv#enabled = 1
let g:airline#extensions#tagbar#enabled = 0
" unicode symbols
let g:airline_symbols = {}
let g:airline_left_sep = '|'
let g:airline_right_sep = '|'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'
